---
import SearchPackages from "./search-packages.astro";
import FilterPackages from "./filter-packages.astro";

type Package = {
  id: number;
  documentId: string;
  package_name: string;
  version: string;
  category: string;
  description: string;
  installed_size: string;
  upstream_url: string;
  createdAt: string;
  updatedAt: string;
  publishedAt: string;
  locale: string;
  license: string;
};

let strapiURL = import.meta.env.STRAPI_URL;
let bearerToken = import.meta.env.STRAPI_READONLY_TOKEN;

const response = await fetch(
  `${strapiURL}/api/packages?sort[1]=package_name:asc`,
  {
    headers: {
      Authorization: `Bearer ${bearerToken}`,
      "Content-Type": "application/json",
    },
  }
);
const apiResponse = await response.json();
let packagesData = apiResponse.data;
let categoriesList: string[] = [];
packagesData.map(
  (p: Package) =>
    p.category.length > 0 &&
    p.category.split(",").forEach((i) => categoriesList.push(i.trim()))
);

let categoriesUnique: string[] = [...new Set(categoriesList.sort())];
console.log(categoriesUnique);
---

<div class="flex max-sm:flex-col max-sm:items-start items-center gap-4">
  <SearchPackages placeholder="Search Packages" />
  <FilterPackages items={categoriesUnique} />
</div>

<div class="mt-8 flow-root">
  <div class="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
    <div class="inline-block min-w-full py-2 align-middle px-4 sm:px-6 lg:px-8">
      <table
        class="table-auto border-collapse min-w-full divide-y divide-gray-300 dark:divide-gray-500"
      >
        <thead>
          <tr>
            <th
              style="padding-left: 1rem;"
              scope="col"
              class="w-2/12 py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 dark:text-gray-100 sm:pl-3"
              >Package
            </th>
            <th
              scope="col"
              class="w-1/12 px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-gray-100"
              >Version</th
            >
            <th
              scope="col"
              class="w-1/12 px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-gray-100"
            >
              Category
            </th>
            <th
              scope="col"
              style="width: 25%;"
              class="w-3/12 px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-gray-100"
              >Description</th
            >
            <th
              scope="col"
              class="w-1/12 px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-gray-100 whitespace-nowrap"
              >Installed Size</th
            >
            <th
              scope="col"
              class="w-1/12 relative py-3.5 pl-3 pr-4 sm:pr-3 text-left text-sm font-semibold text-gray-900 dark:text-gray-100"
              >License</th
            >
            <th
              scope="col"
              style="padding-right: 1rem;"
              class="w-3/12 relative py-3.5 pl-3 pr-4 sm:pr-3 text-left text-sm font-semibold text-gray-900 dark:text-gray-100"
              >Homepage</th
            >
          </tr>
        </thead>
        <tbody id="dataRows"> </tbody>
      </table>
      <div id="sentinel"></div>
    </div>
    <div
      class="px-6 sm:px-8 lg:px-12 font-mono text-sm text-white"
      id="search-status"
    >
    </div>
  </div>
</div>

<script define:vars={{ strapiURL, bearerToken }}>
  let currentPage = 1;
  let pageSize = 100;
  let categoryInput = null;
  let searchInput = null;
  let isDone = false;
  let loading = false;

  async function getPackageData() {
    if (loading || isDone) return;
    console.log("getPackageData() RAN");

    loading = true;
    newLoadingSpinner();

    let searchString =
      searchInput?.length > 0
        ? `&filters[$or][0][package_name][$contains]=${searchInput}&filters[$or][1][description][$contains]=${searchInput}`
        : "";
    let categoryString =
      categoryInput?.length > 0
        ? `&filters[category][$contains]=${categoryInput}`
        : "";
    let paginationString = currentPage
      ? `&pagination[page]=${currentPage}&pagination[pageSize]=${pageSize}`
      : `&pagination[page]=1&pagination[pageSize]=${pageSize}`;

    try {
      const response = await fetch(
        `${strapiURL}/api/packages?sort[1]=package_name:asc${paginationString}${categoryString}${searchString}`,
        {
          headers: {
            Authorization: `Bearer ${bearerToken}`,
            "Content-Type": "application/json",
          },
        }
      );

      const apiResponse = await response.json();
      newRemoveLoadingSpinners();

      if (apiResponse.data.length === 0) {
        isDone = true;
        document.getElementById("search-status").innerHTML = "End of results";
        return;
      }

      renderTable(apiResponse.data);
      currentPage++;
    } catch (error) {
      showErrorMessage();
      console.error(error);
    } finally {
      loading = false;
    }
  }

  function newLoadingSpinner() {
    console.log("newLoadingSpinner() RAN");
    const fragment = document.createDocumentFragment();

    Array.from({ length: 5 }).map(() => {
      const tr = document.createElement("tr");
      tr.classList.add("skeletons");
      tr.innerHTML = `
                <td
                  style="padding-left: 1rem; min-width: 25%;"
                  class="whitespace-nowrap py-2 pl-4 pr-3 text-sm text-gray-500 dark:text-gray-200 sm:pl-0"
                >
                  <div class="flex items-center justify-between ">
<div
              class="animate-pulse rounded-md bg-gray-600"
              style="height: 20px; width: 100%;"
            ></div>
                  </div>
                </td>
                <td 
                class="whitespace-nowrap px-2 py-2 text-sm text-gray-900">
                    <div
              class="animate-pulse rounded-md bg-gray-600"
              style="height: 20px; width: 100%;"
            ></div>
                    
                </td>
                <td class="whitespace-nowrap px-2 py-2 text-sm text-gray-500">
                    <div
              class="animate-pulse rounded-md bg-gray-600"
              style="height: 20px; width: 100%;"
            ></div>
                </td>
                <td class="whitespace-nowrap px-2 py-2 text-sm text-gray-500">
                    <div
              class="animate-pulse rounded-md bg-gray-600"
              style="height: 20px; width: 100%;"
            ></div>
                </td>
                <td class="whitespace-nowrap px-2 py-2 text-sm text-gray-500">
                    <div
              class="animate-pulse rounded-md bg-gray-600"
              style="height: 20px; width: 100%;"
            ></div>
                </td>
                <td class="whitespace-nowrap px-2 py-2 text-sm text-gray-500">
                    <div
              class="animate-pulse rounded-md bg-gray-600"
              style="height: 20px; width: 100%;"
            ></div>
                </td>
      `;
      fragment.appendChild(tr);
    });

    dataRows.appendChild(fragment);
  }

  function clearStatusLine() {
    document.getElementById("search-status").innerHTML = "";
  }

  function clearTableRows() {
    document.getElementById("dataRows").innerHTML = "";
  }

  function newRemoveLoadingSpinners() {
    console.log("newRemoveLoadingSpinners() RAN");
    const skeletonElements = document.querySelectorAll(".skeletons");

    skeletonElements.forEach((element) => element.remove());
  }

  function renderTable(packagesData) {
    if (!packagesData.length) {
      isDone = true;
      if (currentPage === 2) {
        document.getElementById("search-status").innerHTML = "No results found";
      } else {
        document.getElementById("search-status").innerHTML = "End of results";
      }
      return;
    }

    const fragment = document.createDocumentFragment();
    packagesData.map((p) => {
      const tr = document.createElement("tr");
      tr.innerHTML = `
                <td
                  style="padding-left: 1rem;"
                  class="py-4 pl-4 pr-3 text-sm font-medium text-gray-900 dark:text-gray-200 sm:pl-3"
                >
                  ${p.package_name}
                </td>
                <td class="px-3 py-4 text-sm text-gray-500 dark:text-gray-400">
                  ${p.version}
                </td>
                <td class="relative py-4 pl-3 pr-4 text-left text-sm font-medium sm:pr-3 text-gray-500 dark:text-gray-400">
                  ${p.category ? p.category : "—"}
                </td>
                <td class="px-3 py-4 text-sm text-gray-500 dark:text-gray-300">
                  ${p.description}
                </td>
                <td class="px-3 py-4 text-sm text-gray-500 dark:text-gray-400">
                  ${p.installed_size ? p.installed_size : "—"}
                </td>
                <td
                  class="px-3 py-4 text-sm text-gray-500 dark:text-gray-300"
                >
                  ${p.license ? p.license : "—"}
                </td>
                <td
                  style="padding-right: 1rem; word-break:break-all;"
                 class="px-3 py-4 text-sm text-gray-500 dark:text-gray-300">
                  ${p.upstream_url ? "<a href='" + p.upstream_url + "' target='_blank' rel='noopener noreferrer' class='text-blue-500 underline hover:text-blue-700' >" + p.upstream_url + "</a>" : "—"}
                </td>

      `;
      fragment.appendChild(tr);
    });

    dataRows.appendChild(fragment);
  }

  function showErrorMessage() {
    document.getElementById("search-status").innerHTML = "Something went wrong";
  }

  function getSearchQuery() {
    let debounceTimeout;

    document.getElementById("search-input").addEventListener("input", (e) => {
      clearTimeout(debounceTimeout);
      let userInput = e.target.value;

      if (!userInput.length) {
        isDone = false;
        searchInput = null;
        currentPage = 1;
        clearTableRows();
        clearStatusLine();
        const selectElement = document.getElementById("packages");
        selectElement.value = "";
        getPackageData();
      }

      debounceTimeout = setTimeout(() => {
        if (userInput) {
          isDone = false;
          categoryInput = null;
          const selectElement = document.getElementById("packages");
          selectElement.value = "";
          searchInput = userInput;
          currentPage = 1;
          clearTableRows();
          clearStatusLine();
          getPackageData();
        }
      }, 1000);
    });
  }

  function filterPackages() {
    const selectElement = document.getElementById("packages");

    selectElement.addEventListener("change", (e) => {
      let userInput = e.target.value;

      if (!userInput.length) {
        isDone = false;
        searchInput = null;
        categoryInput = null;
        currentPage = 1;
        clearTableRows();
        clearStatusLine();
        getPackageData();
      }

      if (userInput) {
        isDone = false;
        searchInput = null;
        categoryInput = userInput;
        currentPage = 1;
        clearTableRows();
        clearStatusLine();
        const searchInputElement = document.getElementById("search-input");
        searchInputElement.value = "";
        getPackageData();
      }
    });
  }

  getSearchQuery();
  filterPackages();

  const observer = new IntersectionObserver(
    (entries) => {
      const entry = entries[0];
      if (entry.isIntersecting && !isDone) {
        console.log("INTERSECTING");
        getPackageData();
      }
    },
    { threshold: 1.0 }
  );

  observer.observe(sentinel);
</script>

<script defer>
  document.addEventListener("DOMContentLoaded", () => {
    const searchInput = document.getElementById("search-input");
    searchInput.value = "";
    const selectElement = document.getElementById("packages");
    selectElement.value = "";
  });
</script>
